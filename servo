/********************************** README **********************************/
// This lab will have you utilize the MCU PWM peripherial to control some servo
// motors. As the arduino built in PWM API (analogWrite etc.) does not support
// modifying of the PWM output frequency, we are going to use low level MCU 
// register manipulation to wirte our own PWM servo motor driver.
 
// This is mostly a academic exercise, in  your projects, the usage of the
// Arduino servo library is recommended.
 
const uint8_t CHANNELS = 4;
const int pwmPins[CHANNELS] = {2, 3 , 11, 12};
 
void setupPWM();
 
void setup()
{
 
    setupPWM();
 
    /********************************** TASK 1 **********************************/
    // The PWM timer tick period is now set to 1us, and (REG_TCC0_PER *  PWM timer tick period)
    // determines the period of the PWM output, set the frequency of the PWM to 50Hz by writing
    // a value into REG_TCC0_PER:
    REG_TCC0_PER = 20000;
 
    /********************************** TASK 2 **********************************/
    // Read this wiki page : https://en.wikipedia.org/wiki/Servo_control
    // Attatch servo motors on pin 2 and pin 3.
    // Set the both motor's servo angle to 0 deg, 90 deg and 180 deg respectively,
    // delaying 2 seconds between angle changes
    // The CCBx register value corresponds to the pulsewidth in microseconds (us)
    REG_TCC0_CCB0 = 1000; // TCC0 CCB0 - set servo angle to 0 deg on D2
    REG_TCC0_CCB1 = 1000; // TCC0 CCB1 - set servo angle to 0 deg on D3
    delay(2000);
    REG_TCC0_CCB0 = 1500; // TCC0 CCB0 - set servo angle to 180 deg on D2
    REG_TCC0_CCB1 = 1500; // TCC0 CCB1 - set servo angle to 180 deg on D3
    delay(2000);
    REG_TCC0_CCB0 = 2000; // TCC0 CCB0 - set servo angle to 360 deg on D2
    REG_TCC0_CCB1 = 2000; // TCC0 CCB1 - set servo angle to 360 deg on D3
    delay(2000);
}
 
/********************************** TASK 3 **********************************/
// Now that you are familar with interacting with the timer registers, implement
// a function that takes these two parameters:
// ccbCh    int     the CCB channel controlling the servo motor
// angle    float   servo shaft angle in degrees 
// and controls the servo motors accordingly
 
void setServo (int ccbCh, float angle) {
    angle = min(180.0, angle);
    angle = max(0.0, angle);
    int pulseWidth = 1000 + angle / 180.0 * 1000;
    switch (ccbCh) {
        case 0:
            REG_TCC0_CCB0 = pulseWidth;
            break;
        case 1:
            REG_TCC0_CCB1 = pulseWidth;
            break;
        case 2:
            REG_TCC0_CCB2 = pulseWidth;
            break;
        case 3:
            REG_TCC0_CCB3 = pulseWidth;
            break;
    }
}
 
 
// The code below will test your setServo function
void loop() { 
  static int pos = 0;
  for (pos = 0; pos <= 180; pos += 1) { // goes from 0 degrees to 180 degrees in steps of 1
    setServo(0, pos);    
    setServo(1, 180 - pos);            
    delay(15);                       
  }
  for (pos = 180; pos >= 0; pos -= 1) { // goes from 180 degrees to 0 degrees
    setServo(0, pos);    
    setServo(1, 180 - pos);            
    delay(15);   
  }
}
 
 
